{"version":3,"sources":["components/Form.js","components/Titles.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Form","react_default","a","createElement","Fragment","className","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Titles","Weather","city","country","src","icon","alt","temp","humidity","API_KEY","App","state","hidden","isLoading","undefined","descrip","error","_callee","e","zip","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","_this","setState","target","elements","value","fetch","concat","sent","json","console","log","main","sys","weather","description","stop","spinner","loading","components_Weather","components_Titles","components_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72e6d28c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n    return (\r\n        <>\r\n        <div className=\"row justify-content-center py-4\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-4 text-center\">\r\n        <h4 className=\"text-secondary\">Enter your zipcode and 2 letter country to get the current weather.</h4>\r\n        <form className=\"form-group\" onSubmit={this.props.getWeather}>\r\n            <input type=\"text\" name=\"zip\" placeholder=\"Zipcode\" className=\"form-control mb-2\" />\r\n            <input type=\"text\" name=\"country\" placeholder=\"Country\" className=\"form-control mb-3\" />\r\n            <button className=\"btn btn-info btn-lg\">Get Ya Weather</button>\r\n        </form>\r\n        </div>\r\n        <div className=\"col-sm\"></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n}\r\nexport default Form;","import React from 'react';\r\n\r\nconst Titles = (props) => {\r\n    return (\r\n        <>\r\n        <div className=\"row justify-content-center py-4 bg-dark\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-4 text-center\">\r\n            <h1 className=\"display-2 text-info\">Weather App</h1>\r\n            <p className=\"h4 text-light\"><b>Know the weather - enjoy your day.</b></p>\r\n        </div>\r\n        <div className=\"col-sm\"></div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Titles;\r\n","import React from 'react';\r\n\r\nclass Weather extends React.Component {\r\n    \r\nrender() {\r\n    return (\r\n        <>\r\n        <div className=\"row\">\r\n        <div className=\"col-sm\"></div>\r\n        <div className=\"col-4 text-center\">\r\n            \r\n            <h3 className=\"text-info\">Weather for {this.props.city}, {this.props.country}</h3>\r\n            <img src={\"http://openweathermap.org/img/w/\" + this.props.icon +\".png\"} alt=\"weather icon\"/>\r\n            <div className=\"row\">\r\n            <div className=\"col text-right\"><h4>Temp: {this.props.temp}</h4></div>\r\n            <div className=\"col text-left\"><h4>Humidity: {this.props.humidity}</h4></div>\r\n            </div>\r\n        </div>\r\n        <div className=\"col-sm\"></div>            \r\n        </div>\r\n        </>\r\n    )\r\n} \r\n}\r\n\r\n\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport Form from './components/Form';\nimport Titles from './components/Titles';\nimport Weather from './components/Weather';\n\nconst API_KEY = '71da9004fe435d602689f327706e18c4';\n\nclass App extends Component {\n  state = {\n    hidden: true,\n    isLoading: false,\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    descrip: undefined,\n    icon: undefined,\n    error: undefined\n  }\n\ngetWeather = async (e) => {\n  e.preventDefault();\n  this.setState({\n    isLoading: true\n  })\n  const zip = e.target.elements.zip.value;\n  const country = e.target.elements.country.value;\n  const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${zip},${country}&units=imperial&appid=${API_KEY}`);\n\n  const data = await api_call.json();\n  if ( zip && country ) {\n  console.log(data);\n  this.setState({\n    hidden: false,\n    isLoading: false,\n    temp: data.main.temp,\n    city: data.name,\n    country: data.sys.country,\n    humidity: data.main.humidity,\n    descrip: data.weather[0].description,\n    icon: data.weather[0].icon,\n    error: \"\"\n  });\n} else {\n  this.setState({\n    error: \"Please enter a valid city or country.\"\n  })\n}\n}\n\n  render() {\n    const loading = this.state.isLoading;\n    const hidden = this.state.hidden;\n    const error = this.state.error;\n    let spinner;\n    if (error) {\n      spinner = <div className=\"row\">\n      <div className=\"col-sm\"></div>\n      <div className=\"col-4 text-center\">\n      <h3 className=\"text-danger\">Please enter a valid zipcode or country.</h3>\n      </div>\n      <div className=\"col-sm\"></div>\n      </div>\n    } else if (hidden) {\n      spinner = <div></div>\n    } else if (loading) {\n      spinner = <div className=\"row\">\n      <div className=\"col-sm\"></div>\n      <div className=\"col-4 text-center\">\n      <i className=\"fas fa-3x fa-spinner fa-pulse text-info\"></i>\n      </div>\n      <div className=\"col-sm\"></div>\n      </div>;\n    } else {\n      spinner = <Weather \n      temp={this.state.temp}\n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      descrip={this.state.descrip}\n      icon={this.state.icon}\n      error={this.state.error}\n      />\n    }\n    return (\n      <div className=\"container-fluid\">\n        <Titles />\n        <Form getWeather={this.getWeather}/>\n        {spinner}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}